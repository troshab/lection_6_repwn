#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –¥–ª—è RE/PWN CTF –∫—É—Ä—Å—É
# –ü—ñ–¥—Ç—Ä–∏–º–∫–∞: Ubuntu 20.04+, Debian 11+, Kali Linux

set -e  # –ó—É–ø–∏–Ω–∏—Ç–∏ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∏–≤–æ–¥—É
print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}================================${NC}"
}

print_success() {
    echo -e "${GREEN}‚úì $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö† $1${NC}"
}

print_error() {
    echo -e "${RED}‚úó $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚Ñπ $1${NC}"
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω–æ –ù–ï –≤—ñ–¥ root
if [ "$EUID" -eq 0 ]; then
    print_error "–ù–µ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —Ü–µ–π —Å–∫—Ä–∏–ø—Ç –≤—ñ–¥ root!"
    print_info "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: ./setup_linux.sh"
    print_info "–°–∫—Ä–∏–ø—Ç —Å–∞–º –ø–æ–ø—Ä–æ—Å–∏—Ç—å sudo –∫–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ"
    exit 1
fi

print_header "RE/PWN CTF Setup Script"
print_info "–¶–µ–π —Å–∫—Ä–∏–ø—Ç –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –¥–ª—è –∫—É—Ä—Å—É"
echo ""

# –ó–∞–ø–∏—Ç–∞—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
read -p "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è? (y/n): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    print_warning "–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ"
    exit 0
fi

# 1. –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏
print_header "–ö—Ä–æ–∫ 1/7: –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏"
print_info "–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø–∞–∫–µ—Ç—ñ–≤..."
sudo apt update

# 2. –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–∑–æ–≤–∏—Ö —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è RE
print_header "–ö—Ä–æ–∫ 2/7: –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è RE —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤"

PACKAGES=(
    "build-essential"  # gcc, make, g++
    "binutils"         # readelf, objdump, nm, strings
    "file"             # file —É—Ç–∏–ª—ñ—Ç–∞
    "gdb"              # GNU Debugger
    "ltrace"           # library call tracer
    "strace"           # system call tracer
    "upx-ucl"          # UPX packer/unpacker
    "wget"             # –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    "curl"             # –¥–ª—è HTTP –∑–∞–≤–¥–∞–Ω—å
    "netcat-openbsd"   # –¥–ª—è PWN –∑–∞–≤–¥–∞–Ω—å
    "git"              # —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—é –≤–µ—Ä—Å—ñ–π
)

print_info "–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞–∫–µ—Ç—ñ–≤: ${PACKAGES[*]}"
sudo apt install -y "${PACKAGES[@]}"
print_success "RE —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"

# 3. –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Python —Ç–∞ Virtual Environment
print_header "–ö—Ä–æ–∫ 3/7: –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Python —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"

if ! command -v python3 &> /dev/null; then
    print_info "–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Python 3..."
    sudo apt install -y python3 python3-pip python3-dev python3-venv
else
    print_success "Python 3 –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: $(python3 --version)"

    # –ü–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏—Å—è —â–æ venv –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    if ! dpkg -l | grep -q python3-venv; then
        print_info "–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è python3-venv..."
        sudo apt install -y python3-venv
    fi
fi

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è virtual environment
if [ ! -d ".venv" ]; then
    print_info "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è Python virtual environment (.venv)..."
    python3 -m venv .venv
    print_success "Virtual environment —Å—Ç–≤–æ—Ä–µ–Ω–æ"
else
    print_success "Virtual environment –≤–∂–µ —ñ—Å–Ω—É—î"
fi

# –ê–∫—Ç–∏–≤–∞—Ü—ñ—è venv —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
if [ -f "requirements.txt" ]; then
    print_info "–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Python –ø–∞–∫–µ—Ç—ñ–≤ –≤ .venv..."

    # –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ venv —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ø–∞–∫–µ—Ç–∏
    source .venv/bin/activate
    pip install --upgrade pip
    pip install -r requirements.txt
    deactivate

    print_success "Python –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ .venv"
    print_info "–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó: source .venv/bin/activate"
else
    print_warning "requirements.txt –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ"
fi

# 4. –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Docker (–¥–ª—è PWN –∑–∞–≤–¥–∞–Ω—å)
print_header "–ö—Ä–æ–∫ 4/7: –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Docker"

if ! command -v docker &> /dev/null; then
    print_info "–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Docker..."

    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Docker
    sudo apt install -y docker.io docker-compose

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –≥—Ä—É–ø–∏ docker
    sudo usermod -aG docker $USER

    # –ó–∞–ø—É—Å–∫ Docker —Å–µ—Ä–≤—ñ—Å—É
    sudo systemctl enable docker
    sudo systemctl start docker

    print_success "Docker –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    print_warning "–í–ê–ñ–õ–ò–í–û: –î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Docker –±–µ–∑ sudo, –≤–∏–π–¥—ñ—Ç—å –∑ —Å–∏—Å—Ç–µ–º–∏ —Ç–∞ —É–≤—ñ–π–¥—ñ—Ç—å –∑–Ω–æ–≤—É"
    print_info "–ê–±–æ –≤–∏–∫–æ–Ω–∞–π—Ç–µ: newgrp docker"
else
    print_success "Docker –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: $(docker --version)"
fi

# 5. –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è checksec
print_header "–ö—Ä–æ–∫ 5/7: –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è checksec"

if ! command -v checksec &> /dev/null; then
    print_info "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è checksec..."
    wget https://raw.githubusercontent.com/slimm609/checksec.sh/master/checksec -O /tmp/checksec
    sudo install /tmp/checksec /usr/local/bin/checksec
    print_success "checksec –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
else
    print_success "checksec –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
fi

# 6. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Ghidra (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
print_header "–ö—Ä–æ–∫ 6/7: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Ghidra"

if command -v ghidraRun &> /dev/null; then
    print_success "Ghidra –∑–Ω–∞–π–¥–µ–Ω–æ: $(which ghidraRun)"
else
    print_warning "Ghidra –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
    print_info "Ghidra –ø–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è Task 04 (ROT-N + Ghidra)"
    print_info "–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –∑: https://ghidra-sre.org/"
    print_info "–ê–±–æ –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —á–µ—Ä–µ–∑ flatpak: flatpak install flathub org.ghidra_sre.Ghidra"
fi

# 7. –ó–±—ñ—Ä–∫–∞ –ø—Ä–æ—î–∫—Ç—É
print_header "–ö—Ä–æ–∫ 7/7: –ó–±—ñ—Ä–∫–∞ PWN –∑–∞–≤–¥–∞–Ω—å"

if [ -d "pwn" ] && [ -f "pwn/Makefile" ]; then
    print_info "–ö–æ–º–ø—ñ–ª—è—Ü—ñ—è PWN –∑–∞–≤–¥–∞–Ω—å..."
    cd pwn
    make clean
    make
    cd ..
    print_success "PWN –∑–∞–≤–¥–∞–Ω–Ω—è –∑—ñ–±—Ä–∞–Ω–æ"
else
    print_warning "PWN –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–±—ñ—Ä–∫—É"
fi

# –§—ñ–Ω–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
print_header "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è"

TOOLS=(
    "gcc:GCC Compiler"
    "make:Make"
    "gdb:GNU Debugger"
    "python3:Python 3"
    "docker:Docker"
    "checksec:Checksec"
    "file:File utility"
    "strings:Strings utility"
    "readelf:Readelf"
    "objdump:Objdump"
    "strace:Strace"
    "ltrace:Ltrace"
    "upx:UPX"
    "nc:Netcat"
)

print_info "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—Ö —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤:"
echo ""

ALL_OK=true
for tool_desc in "${TOOLS[@]}"; do
    tool="${tool_desc%%:*}"
    desc="${tool_desc##*:}"
    if command -v "$tool" &> /dev/null; then
        print_success "$desc"
    else
        print_error "$desc –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        ALL_OK=false
    fi
done

echo ""
print_header "–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"

if [ "$ALL_OK" = true ]; then
    print_success "–í—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
else
    print_warning "–î–µ—è–∫—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–¥–∏–≤. –≤–∏—â–µ)"
fi

echo ""
print_info "–ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:"
echo "  1. –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ Python venv: source .venv/bin/activate"
echo "  2. –î–ª—è RE –∑–∞–≤–¥–∞–Ω—å: cd re/task01_inventory && make"
echo "  3. –î–ª—è PWN –∑–∞–≤–¥–∞–Ω—å: cd pwn && docker compose up -d"
echo "  4. –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–µ—Å—Ç–∏: ./test_all.sh"
echo ""
print_info "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è:"
echo "  - RE –∫—É—Ä—Å: re/README.md"
echo "  - PWN –∫—É—Ä—Å: pwn/README.md"
echo "  - –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—è: slides/README.md"
echo ""
print_info "Python Virtual Environment:"
echo "  - –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏: source .venv/bin/activate"
echo "  - –î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏: deactivate"
echo "  - –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ø–∞–∫–µ—Ç–∏: pip install <package>"
echo ""

if groups $USER | grep -q docker; then
    print_success "–í–∏ –≤–∂–µ –≤ –≥—Ä—É–ø—ñ docker"
else
    print_warning "–í–ê–ñ–õ–ò–í–û: –î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Docker –≤–∏–∫–æ–Ω–∞–π—Ç–µ:"
    echo "  newgrp docker"
    echo "  –∞–±–æ –≤–∏–π–¥—ñ—Ç—å –∑ —Å–∏—Å—Ç–µ–º–∏ —Ç–∞ —É–≤—ñ–π–¥—ñ—Ç—å –∑–Ω–æ–≤—É"
fi

print_success "–ì–æ—Ç–æ–≤–æ! –ü—Ä–∏—î–º–Ω–æ–≥–æ –Ω–∞–≤—á–∞–Ω–Ω—è! üéì"
